MovieController - list<Movies> , map<location, list<Movie>>
TheatreController - list<Theatre>, map<location, list<Theatre>, returns map<theatre, list<shows>> for a given city and movie

//Once I select a movie, I scan thru all theatres in that location, theatre has show, show has movie, whichever show has this movie name, I display that.

Low-Level design for book My Show kind of service.


Pessimist lock + time_until for concurrency.


https://akshitbansall.medium.com/db-locking-in-reservation-systems-3b3d574c7676

Optimistic lock is more suitable for the situation of reading more and writing less ( Read more scenes ), Pessimistic locking is more suitable for writing more and reading less ( Write more scenes ).

there’s a seat-booking table at the backend where each row corresponds to one seat at one auditorium. Along with that it holds columns like movie session, seat status (booked or vacant) and customer id (null, if vacant).
Let’s say I select a seat and proceed to the payment page. At this point the session will acquire a lock, so that no other session is able to read the record or make changes to it. Such kind of locking is called ‘Exclusive Locking’. For any other user session trying to access the locked records from the table, it will have to wait for the lock to be released for the particular record in the table.

Another type of locking is ‘Shared Lock’ where a session can read the row while it is already being lock-acquired by some other session. However, it cannot make an update until the first session has released the lock.
We use ‘FOR SHARE’ along with SELECT query to acquire shared lock.
This kind of locking technique would not be preferable in our scenario. Imagine, multiple users will be reading a particular seat as ‘available’ and paying for it. But due to shared lock implementation, only the user session which acquired the lock first, will be getting the seat.

Multiple Users Booking Multiple Seats Concurrently -
Now let’s say I wanted to book seats for my entire family. I could see seats A1 to A4 as vacant so I selected them and proceeded to the payment page.
//Transaction where user-1 books seats A1 to A4begin;seatsAvailable() -> Select * from booking where seat_number IN  (‘A1’,‘A2’, A3’, ‘A4’) FOR UPDATEbookTickets() -> update booking set customer_id = ‘101’ , seat_status = ‘booked’ where seat_number IN  (‘A1’,‘A2’, A3’, ‘A4’) ;commit;
Meanwhile another user selected seats A3 to A5.
At this moment, one proposition is to reject the entire transaction since all the seat requirements can’t be fulfilled.
Or, confirm booking for seat A5 for the second user instead of waiting for the lock to be released from A3 and A4 seats.



Pessimistic or optimistic locks
First of all, let’s figure out which of the lock mechanisms we should use.
Most tasks assume that we have such a flow:
	1. A user sees the scheme of the cinema hall with available and reserved seats.
	2. The user selects the desired places and sends a request to the server.
	3. Places are reserved for 5–15 minutes, during which the user must make payment.
	4. If the payment was successful, the seats are considered purchased.
As soon as we described the flow, it became clearer how to act. We cannot use optimistic locking when waiting for payment since this will mean that several users may have time to pay for seats, but only the first of them will get it. But for the initial reservation, we can use any of the locks.


Typically “pessimistic locking” with some time bound involves some kind of background task running on the backend that checks the pending reservation table, and when the reservation window expires, removes the reservation lock. You also store this expiration on the web page somewhere so the user can be notified when it expires.

“Optimistic Locking” (checking for collisions only on completion) is a fair bit simpler: you just add versions to the resource, and if the current version is higher or equal to the expected version, you bail. You don’t usually want to do this sort of thing for a booking system however, since it’s lousy UX for someone to go through the whole process only to find someone sniped their reservation while they were booking it. Still, it is an option for very low-traffic systems, especially if the booking process is fast.



Why not store list of theatres and show in movie class????? Everytime a show/theatre/theatrecontroller is added/removed, movie class will be update, 
instead just add/delete show/theatre and update the info in theatrecontroller class. Decoupling.

#include<iostream>
#include<vector>
#include<unordered_map>


using namespace std;
class Theatre;
class Show;
class Hall;
class Seat;

class Movie;

class User{

    int userId;
    string userName;

    public:

    void setUserName(string name)
    {
        this->userName=name;
    }

    string getUserName()
    {
        return this->userName;
    }

};

class Location{

    string city;
    string country;
    int pincode;

    public:

    void setCity(string city)
    {
        this->city=city;
    }

    string getCity()
    {
        return this->city;
    }

};

class MovieController{

    vector<Movie*> movieList;
    unordered_map<Location*,vector<Movie*>> MoviePerCity;

    public:

    void addMovie(Movie* movie)
    {
        this->movieList.push_back(movie);
    }

    vector<Movie*> getMovieList()
    {
        return this->movieList;
    }

    void addMovieToLocation(Location* location, Movie* movie)
    {
        (this->MoviePerCity[location]).push_back(movie);
    }

    vector<Movie*> getMovieByLocation(Location* location)
    {
        return this->MoviePerCity[location];
    }


};

//factory design patten for extendability

class Event{

    string eventId;
    string eventName;
    double duration;

    public:

    void setEventName(string name)
    {
        this->eventName=name;
    }

    string getEventName()
    {
        return this->eventName;
    }

};

enum Genre{
    horror,
    comedy,
    thriller,

};

class Movie:public Event{

    Genre genre;
    string directorName;
    vector<Show*> showsOfMovie;
    


    public:

    string setDirectorName(string name)
    {
        this->directorName=name;
    }
    


};

class EventFactory{

    public:

    static Event* createEvent(string eventName)
    {
        Event* event;
        if(eventName=="movie")
        {
            event=new Movie();
        }

        return event;
    }

};

class Theatre{

    string theatreId;
    string theatreName;
    vector<Hall*> theatreHalls;
    vector<Show*> theatreShows;

    public:

    Theatre(int id, string name)
    {
        this->theatreId=id;
        this->theatreName=name;
    }

    string getTheatreName()
    {
        return this->theatreName;
    }

    vector<Show*> getTheatreShows()
    {
        return this->theatreShows;
    }


};

enum SeatCategory{

    regular,
    exclusive,
    premium,

};

class Seat{

    int seatNumber;
    SeatCategory seatCategory;
    int seatPrice;

    public:

    Seat(int number, SeatCategory category)
    {
        this->seatNumber=number;
        this->seatCategory=category;
    }

    void getSeatDetails()
    {
        cout<<this->seatNumber<<" "<<this->seatCategory<<endl;
    }


};

class Hall{

    string hallId;
    int capacity;
    vector<Seat*> hallSeats;

    public:

    string getHallID()
    {
        return this->hallId;
    }

    Hall(string id, int capacity)
    {
        this->hallId=id;
        this->capacity=capacity;
    }

    void addSeatToHall(Seat* seat)
    {
        hallSeats.push_back(seat);
    }

    vector<Seat*> getSeatsPerHall()
    {
        return hallSeats;
    }


};

class Time
{
    int hour;
    int minute;
    int second;
};

class EventShow{

    string eventShowID;
    string eventName;
    Time startTime;
    Time endTime;

    public:

    void setEventShowID(string id)
    {
        this->eventShowID=id;
    }

    string getEventShowID()
    {
        return this->eventShowID;
    }

    void setEventShowName(string name)
    {
        this->eventName=name;
    }




};

class MovieShow:public EventShow{

    
    Movie* movie;
    Hall* hall;
    vector<Seat*> bookedSeats;

    public:

    void bookSeat(Seat* seat)
    {
        for(int i=0;i<bookedSeats.size();i++)
        {
            if(bookedSeats[i]==seat)
            {
                cout<<"Seat is already booked\n";
                return ;
            }
        }

        bookedSeats.push_back(seat);
        cout<<"Your seat has been booked\n";
        

    }

    void getShowDetails()
    {
        cout<<movie->getEventName() << "is shown  in"<<hall->getHallID()<<endl;
    }

};

class EventShowFactory{

    public:

    EventShow* createEventShow(string showName)
    {
        EventShow* eventShow;

        if(showName=="movieShow")
        {
            eventShow=new MovieShow();
        }

        return eventShow;
    }

};

enum PaymentMode{
    card,
    cash,
    UPI,
};

enum PaymentStatus{
    success,
    pending,
    failed,

};

class Payment
{
    string paymentId;
    Time timeOfPayment;
    PaymentMode paymentMode;
    PaymentStatus paymentStatus;

    public:
    
    void completePayment(int amount);
};

enum BookingStatus
{
    success,
    failed,
};

class Booking{

    string bookingId;
    User* user;
    Movie* movie;
    Show* show;
    vector<Seat*> seat;
    Payment payment;
    Time timeOfBooking;
    double amount;
    BookingStatus bookingStatus;

};


class TheatreController{

    vector<Theatre*> listOfTheatres;
    unordered_map<Location*, vector<Theatre*>> locationWiseTheatreList;

    public:

    void addTheatre(Theatre* theatre)
    {
        this->listOfTheatres.push_back(theatre);
    }

    void addTheatrePerLocation(Location* location, Theatre* theatre)
    {
        this->locationWiseTheatreList[location].push_back(theatre);
    }

    vector<Theatre*> getTheatrePerLocation(Location* location)
    {
        return this->locationWiseTheatreList[location];
    }

    /*

    // returns map<theatre, list<shows>> for a given city and movie

    Map<Theatre, List<Show>> getAllShow(Movie movie, City city) {

        //get all the theater of this city

        Map<Theatre, List<Show>> theatreVsShows = new HashMap<>();

        List<Theatre> theatres = cityVsTheatre.get(city);

        //filter the theatres which run this movie

        for(Theatre theatre : theatres) {

            List<Show> givenMovieShows = new ArrayList<>();
            List<Show> shows = theatre.getShows();

            for(Show show : shows) {
                if(show.movie.getMovieId() == movie.getMovieId()) {
                    givenMovieShows.add(show);
                }
            }
            if(!givenMovieShows.isEmpty()) {
                theatreVsShows.put(theatre, givenMovieShows);
            }
        }

        return theatreVsShows;
    }


    */

    



};

//Driver class
class BookMyShow
{
    MovieController* movieController;
    TheatreController* theatreController;

    public:

    BookMyShow()
    {
        movieController=new MovieController();
        theatreController=new TheatreController();

        
    }

    void createMovie(string movieName);

    void createTheatre(string theatreName);

    void createLocation(string locationName);

    


};

int main()
{
    BookMyShow* bookMyShow=new BookMyShow();


}
